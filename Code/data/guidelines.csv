,type,docno,text
0,bottom_app_bar,0,bottom app bar: Bottom app bars should be located at the bottom of the screen and can contain up to 4 icon buttons (including an overflow menu) and a FAB (floating action button).
1,bottom_app_bar,1,bottom app bar: Bottom app bars can be used for screens with 2 to 5 actions.
2,bottom_app_bar,2,bottom app bar: Bottom app bars should not be used on screens with a navigation bar.
3,bottom_app_bar,3,bottom app bar: Bottom app bars should not be used on screens with only one or no actions.
4,bottom_app_bar,4,"bottom app bar: Bottom app bars are different from navigation bars (which only contain destinations in the app, not actions)."
5,bottom_app_bar,5,"bottom app bar: On a screen with a bottom app bar, an FAB should never be placed outside of the bottom app bar."
6,bottom_app_bar,6,"bottom app bar: When a bottom app bar is used together with a top app bar, navigation elements should be in the top app bar."
7,bottom_app_bar,7,"bottom app bar: When a bottom app bar is used together with a top app bar, there should only be one overflow menu on the screen."
8,bottom_app_bar,8,"bottom app bar: When a bottom app bar is used together with a top app bar, actions should have a consistent place across the app."
9,bottom_app_bar,9,bottom app bar: Any snackbars that appear while using the app should appear above the bottom app bar and not cover it.
10,bottom_app_bar,10,bottom app bar: A bottom app bar is not the same as a navigation bar.
11,top_app_bar,11,"top app bar: A top app bar contains a title (which can be a screen title or the name of the app), and actions related to the current screen. It should be located at the very top of the screen."
12,top_app_bar,12,"top app bar: There are four types of top app bars: center-aligned, which should be used for the main root page of an app, small, which is used on compact screen layouts or scrolled views on subpages that require back navigation and multiple actions, medium, which is the initial state of a small top app bar before the screen is scrolled, and large, which is used to emphasize the title component."
13,top_app_bar,13,top app bar: Text in non-large top app bars should not wrap (be more than one line).
14,top_app_bar,14,top app bar: A navigation icon can be located on the left side of a top app bar (e.g. a back arrow or a menu).
15,top_app_bar,15,top app bar: Interactive icons on the right side of a top app bar should be ordered from most to least used from left to right.
16,top_app_bar,16,"top app bar: The right side of a top app bar should have three icon buttons at most. If there are more actions that need to be accessible, the third icon should be a 'more' icon (three vertical dots) and open an overflow menu."
17,badge,17,"badge: Badges can be placed in the corner of an icons bounding box to show notifications, item counts, or information relating to a navigation destination."
18,badge,18,badge: Badges should have a contrasting color that sticks out from the icon and its surroundings.
19,badge,19,"badge: There are small and large badges. Large badges can have text, which should not be longer than 4 characters."
20,badge,20,badge: Badges should not overlap with elements other than the icon they belong to.
21,common_button,21,"common button: Elevated, filled, filled tonal, outlined, and text buttons can contain a leading icon, which should be to the left of the text (not above it). There should not be more than one icon in a button."
22,common_button,22,"common button: Elevated, filled, filled tonal, outlined, and text buttons should have concise labels."
23,common_button,23,"common button: Elevated, filled, filled tonal, outlined, and text buttons should have rounded corners."
24,common_button,24,"common button: There should not be too many elevated, filled, filled tonal, outlined, or text buttons on a screen. Their number can be reduced by adding an overflow menu or by replacing them with icon buttons."
25,common_button,25,"common button: Elevated, filled, filled tonal, outlined, and text buttons should have their width aligned with either their label text or with the container that contains them."
26,common_button,26,"common button: The label text of elevated, filled, filled tonal, outlined, and text buttons should be in sentence case and not wrap over multiple lines."
27,common_button,27,common button: Text buttons should be distinguishable from normal text.
28,common_button,28,"common button: Outlined buttons on top of images can be hard to see and can be changed to be filled or filled tonal buttons, or moved below or above the image."
29,common_button,29,common button: Text buttons are usually embedded in other components.
30,common_button,30,"common button: Out of elevated, filled, filled tonal, outlined, and text buttons, filled buttons have the highest emphasis and should be used for the most important actions on the screen."
31,common_button,31,"common button: Elevated, filled tonal, and outlined buttons have medium emphasis and can be used for less important actions."
32,common_button,32,common button: Text buttons have low emphasis and can be used for optional or supplementary actions.
33,common_button,33,"common button: For actions that require even less emphasis than text buttons, like filter options, chips should be used instead."
34,common_button,34,"common button: These guidelines apply to elevated, filled tonal, text, and outlined buttons. Icon buttons, segmented buttons, and floating action buttons have their own sets of guidelines and should be seen separately."
35,fab,35,fab: FABs are used for the most common or important action on a screen.
36,fab,36,"fab: There are three sizes of FABs: Small, normal, and large."
37,fab,37,fab: FABs should contrast the area behind them using color or elevation.
38,fab,38,"fab: FABs should be on the very top layer of the screen (not covered by any other components, e.g. badges)."
39,fab,39,"fab: FABs should have a clear and simple icon. If an icon alone is not clear enough, consider using an extended FAB."
40,fab,40,"fab: There should not be more than one large or extended FAB on a screen. However, large and extended FABs can be supported by one or more small FABs, which should be placed above the larger FAB."
41,fab,41,"fab: FABs should be used for positive or constructive actions, not for minor or destructive actions."
42,fab,42,"fab: FABs should be placed in the bottom right corner of the screen to be easy accessible using thumbs. If the screen contains a navigation bar, a bottom app bar, or a similar element at its bottom, the FAB should be placed above it and not overlap with it."
43,fab,43,"fab: Extended FABs can be used in screens with long, scrolling views and can be replaced by filled buttons in non-scrolling screens, depending on the context."
44,fab,44,fab: Extended FABs can be used when an icon might not be clear enough to express the FAB's purpose.
45,fab,45,fab: An extended FAB should not be an option in a set of actions (e.g. cancel/finish). Use a regular button instead in this case.
46,fab,46,"fab: The icon on an extended FAB is optional, the text is not."
47,fab,47,fab: The text on an extended FAB should not wrap over multiple lines.
48,fab,48,fab: Extended FABs should not be placed inside other containers or overlap with app bars.
49,icon_button,49,"icon button: Icon buttons can be contained using a (tonal) fill or an outline, if necessary."
50,icon_button,50,icon button: Icon buttons should be used for actions in compact layouts.
51,icon_button,51,"icon button: Contained icon buttons should be used when visual separation is necessary (e.g. on a busy background), otherwise they are not needed."
52,icon_button,52,icon button: Filled icon buttons have high emphasis and should be used for very important actions.
53,icon_button,53,"icon button: Tonal and outlined icon buttons have medium emphasis, while standard icon buttons have the lowest emphasis."
54,icon_button,54,icon button: The icons used on icon buttons should be clear and unambiguous.
55,segmented_button,55,segmented button: A segmented button consists of two to five segments and be used for single-select or multi-select functionality.
56,segmented_button,56,"segmented button: If there are more than five choices to be made in a segmented button, or if the choices are complex, chips should be used instead."
57,segmented_button,57,"segmented button: A segmented button segment can contain icons, label text, or both."
58,segmented_button,58,segmented button: Label text on segments should not wrap.
59,segmented_button,59,"segmented button: Each segment of a segmented button should be styled the same way, do not mix icon and text segments (this does not apply to the icon that appears when a segment is selected)."
60,card,60,"card: Cards contain related elements (content and actions relevant to a single topic) and can be displayed in a grid, vertical list or carousel."
61,card,61,"card: Cards can be elevated, filled, or outlined."
62,card,62,card: Cards should be easy to scan for relevant and actionable information and should have a clear hierarchy.
63,card,63,"card: Don't force content into cards when spacing, headlines, or dividers would create a simpler visual hierarchy."
64,card,64,"card: On smaller screens, consider swapping cards for lists."
65,card,65,card: Dividers can be used in cards to indicate expandable content (full-width dividers) or separate related content (inset dividers).
66,card,66,"card: Cards can also contain buttons, icon button, selection controls, and linked text."
67,card,67,card: Overflow menus are usually in the upper or lower right corner of a card.
68,card,68,"card: Cards should expand, not scroll to reveal information."
69,carousel,69,carousel: A carousel is a collection of items that can be scrolled on and off the screen.
70,carousel,70,"carousel: There are four types of carousels: multi-browse, uncontained, hero, and full screen."
71,carousel,71,carousel: Carousel items have dynamic width (depending on the space the carousel takes up and which item is in focus.
72,carousel,72,"carousel: Multi-browse carousels are used to browse many visual items at once, uncontained carousels are used for highly customized or text-heavy carousels, hero carousels are used for spotlighting very large visual items, and full-screen carousels are used for vertically scrolling video or image feeds."
73,carousel,73,carousel: Items should never be too small to tell what they are.
74,carousel,74,"carousel: A 'show all' button next to a carousel is recommended, but not mandatory."
75,carousel,75,"carousel: In compact windows, showing more than three items that have text is not recommended. It can be okay to show more if the item's images and content are easy to understand and recognize."
76,carousel,76,carousel: Avoid exceeding two lines of text in carousel items unless the background is simple.
77,carousel,77,carousel: Avoid adding buttons into a carousel.
78,carousel,78,carousel: Don't cover a carousel with other elements.
79,checkbox,79,checkbox: Checkboxes are used for selecting multiple options from a list.
80,checkbox,80,checkbox: Checkboxes can have parent checkboxes to select/deselect multiple items that belong together.
81,checkbox,81,"checkbox: Checkboxes should be in cases where multiple related values can be selected at the same time. If the options are unrelated or more verbose, use switches instead. If only one option can be selected at a time, using radio buttons instead."
82,chip,82,"chip: Chips can be used to help enter information, make selections, filter content, and trigger actions."
83,chip,83,"chip: There are assist, filter, input, and suggestion chips."
84,chip,84,chip: Chips should not be used analogous to buttons. Buttons are more significant and should progress the user trough the app.
85,chip,85,chip: Avoid using chips for major actions (e.g. cancel/save)
86,chip,86,chip: Chips can appear together in a set and scroll horizontally.
87,chip,87,"chip: Assist chips are used for smart or automated actions that can span multiple apps (e.g. add to calendar), filter chips are used to filter a collection of items, input chips are used to separate discrete pieces of information entered by the user (e.g. email contacts), and suggestions chips show suggestions to the user"
88,chip,88,chip: Chips can be elevated when they are on top of images.
89,chip,89,chip: The label text on a chip should be 20 characters or fewer.
90,chip,90,"chip: Filter chips can wrap a line, but use horizontal scrollling if there would be more than 2 rows of chips."
91,dialog,91,dialog: Dialogs are used for critical prompts to the user that require a decision or acknowledgement.
92,dialog,92,dialog: Dialogs can be basic (small and on top of the normal screen) or full-screen.
93,dialog,93,dialog: Less important prompts and notifications should use a snackbar instead of a dialog.
94,dialog,94,dialog: The headline of a dialog should be unambiguous and short.
95,dialog,95,dialog: Choices made in a dialog should be clear.
96,dialog,96,dialog: A basic dialog should contain a maximum of two actions.
97,dialog,97,dialog: Do not use vague terms for actions in dialogs.
98,divider,98,divider: Dividers are used to group and separate items.
99,divider,99,"divider: Dividers should be visible, but not bold."
100,divider,100,divider: Do not use dividers if items could be grouped using open space instead.
101,divider,101,"divider: There are two types of dividers: Full width dividers divide interactive and non-interactive areas of containers or separate larger sections of unrelated content, while inset dividers separate related content within a section."
102,divider,102,divider: Do not use too many full-width dividers.
103,divider,103,divider: Both types of dividers can be combined to reflect a screen's hierarchy.
104,list,104,list: Lists contain multiple list items to help users find a specific item and act on it.
105,list,105,list: List should be easily scannable.
106,list,106,list: Lists should be ordered in a logical way.
107,list,107,list: List items can have one to three lines.
108,list,108,list: List items can contain primary and supplemental actions represented by icons and text.
109,list,109,"list: Supporting visuals should be anchored to the leading edge of list items, not centered."
110,list,110,"list: If a list's rows have a lot of content, use dividers."
111,menu,111,menu: Menus display a list of choices on a temporary surface.
112,menu,112,menu: A menu's height should be at most one row less than the app's height.
113,menu,113,menu: Menu list items can contain label text and leading or trailing icons.
114,menu,114,"menu: If one menu item contains a leading or trailing icon, all items should."
115,menu,115,menu: Menu list items can be grouped and separated using dividers.
116,menu,116,"menu: If a menu does not provide enough space, bottom sheets can be an alternative."
117,menu,117,menu: A menu should appear directly below the component that was pressed to open it.
118,navigation_bar,118,navigation bar: A navigation bar provides access to 3 to 5 destinations at the bottom of the screen.
119,navigation_bar,119,navigation bar: The destinations in a navigation bar should be of roughly equal importance.
120,navigation_bar,120,"navigation bar: The destinations in a navigation bar should stay the same across different screens, and one destination should always be active."
121,navigation_bar,121,"navigation bar: A navigation bar should only be used for important, top-level destinations."
122,navigation_bar,122,navigation bar: Combining a navigation bar with tabs might cause confusion.
123,navigation_bar,123,"navigation bar: Each destination has an icon and optionally label text (if one destination is labelled, all destinations should be labelled)."
124,navigation_bar,124,"navigation bar: Destination labels in a navigation bar should not wrap lines, be shrunk, or be truncated."
125,navigation_bar,125,navigation bar: A navigation bar can be paired with a FAB placed above it.
126,navigation_drawer,126,navigation drawer: A navigation drawer can be used if there are more than 5 primary navigation destinations or more than one level of navigation hierarchy in an app.
127,navigation_drawer,127,navigation drawer: Using a navigation drawer together with other navigation elements like navigation bars should be avoided.
128,navigation_drawer,128,"navigation drawer: Groups of destinations within a navigation drawer can be separated using dividers, but there should not be dividers between every individual destination."
129,navigation_drawer,129,"navigation drawer: Destinations in a navigation drawer must always have a label text and can have an icon. If one destination has an icon, all destinations should have one."
130,navigation_drawer,130,"navigation drawer: The text labels of destinations in a navigation drawer should be clear, concise, and short enough so that it does not get cut off. It should also not wrap over multiple lines."
131,navigation_drawer,131,navigation drawer: Related destinations in a navigation drawer can (but do not have to) be grouped using subhead section labels.
132,radio_button,132,radio button: Radio buttons let users select one option from a list.
133,radio_button,133,radio button: Radio buttons should not be nested.
134,radio_button,134,radio button: Radio buttons should be used when there are five or fewer options.
135,radio_button,135,"radio button: When space is constrained, consider using a drop-down menu instead."
136,radio_button,136,radio button: Radio buttons should always have a label.
137,radio_button,137,"radio button: Avoid having radio buttons in a horizontal list, as it can make it hard to tell which label belongs to which button."
138,radio_button,138,radio button: There should always be a preselected option when using radio buttons.
139,radio_button,139,"radio button: If it is possible to select more than one option at the same time, use checkboxes or switches instead."
140,search,140,search: Search bars and views let users navigate using search queries.
141,search,141,search: Search results should always be shown in a search view.
142,search,142,search: The leading icon in a search bar should be a non-functional search icon or a navigational action (like a back arrow).
143,search,143,search: A search bar can contain up to two trailing icons for additional search modes or high level actions.
144,search,144,search: The hinted search text in a search bar should describe what the user will search for.
145,snackbar,145,"snackbar: Snackbars inform users of a process that an app has performed or will perform. They appear temporarily, towards the bottom of the screen. They shouldnâ€™t interrupt the user experience, and they donâ€™t require user input to disappear."
146,snackbar,146,snackbar: Only one snackbar may be displayed at a time.
147,snackbar,147,snackbar: A snackbar can contain a single action.
148,snackbar,148,"snackbar: Snackbars are used for low-priority messages. For high-priority messages, or messages that require user confirmation, dialogs should be used instead."
149,snackbar,149,"snackbar: The text on a snackbar should be only one line long if possible, but can up to two lines long if necessary."
150,snackbar,150,snackbar: Snackbars should not contain icons.
151,snackbar,151,snackbar: Snackbars should not contain stylized text or inline links.
152,snackbar,152,"snackbar: The action in a snackbar should use a text button, not any other button type."
153,snackbar,153,snackbar: The label text of a snackbar should have a different color than the text button.
154,snackbar,154,"snackbar: A snackbars container can be slightly opaque, as long as the text remains legible."
155,snackbar,155,"snackbar: If an action is longer, it can be displayed in a third line on the snackbar."
156,snackbar,156,"snackbar: Dismiss actions in snackbars are unnecessary, as they disappear by themselves."
157,snackbar,157,"snackbar: Snackbars should appear at the bottom of the screen, but not cover any navigation elements."
158,snackbar,158,"snackbar: Snackbars should not be placed in front of or behind FABs. Instead, they should be placed above them."
159,bottom_sheet,159,bottom sheet: A bottom sheet shows secondary content anchored to the bottom of the screen. Modal bottom sheets can be pulled up to reveal more content as an alternative to dialogs or menus.
160,bottom_sheet,160,bottom sheet: Bottom sheets can contain lists or other layouts and content in them can be separated using dividers.
161,bottom_sheet,161,"bottom sheet: Bottom sheets should contain additional or secondary content, not the app's main content."
162,slider,162,slider: Sliders let users select a value from a range along a track.
163,slider,163,"slider: Sliders can be continuous, discrete, or a range select. The selection can start on the left or in the middle of the track."
164,slider,164,slider: Sliders should present the full range of choices that are available.
165,switch,165,switch: Switches let users turn independent items on or off.
166,switch,166,"switch: Switches should be used only for on/off choices, for choices of two opposing options use a segmented button."
167,switch,167,"switch: If there are multiple related options, use checkboxes instead of switches."
168,switch,168,switch: Don't replace buttons with switches.
169,switch,169,"switch: If option choices need to be saved/confirmed before coming into effect, use checkboxes instead of switches."
170,switch,170,"switch: Icons can be used to emphasize the state of a switch, but should not cause confusion."
171,switch,171,switch: Labels next to switches should be short and direct and describe what happens when the switch is on.
172,tab,172,tab: Tabs are used to group content and let users switch between views on the same screen.
173,tab,173,tab: Tabs can scroll horizontally and there is no limit for their amount.
174,tab,174,"tab: Tabs should be used to group related content, not sequential content (like chapters in a book)."
175,tab,175,tab: Icons can be used next to a tab's label.
176,tab,176,tab: Tab labels should not be truncated.
177,tab,177,tab: Tabs can have labels and/or icons. All tabs should be styled the same way.
178,text_field,178,text field: Text fields let users enter text.
179,text_field,179,"text field: There are outlined and filled text fields, with filled text fields having more and outlined text fields having less emphasis."
180,text_field,180,"text field: When using both types of text fields, they should be separated by region."
181,text_field,181,text field: Label text for text fields should be short and contained in one line.
182,text_field,182,text field: Required text fields should have an indicator.
183,general,183,general: It should never be ambiguous which parts of the UI can be interacted with.
184,general,184,"general: Elements that belong together in some way should be grouped. This can be done using: proximity, similarity (in shape, color, size, stroke, etc.), and other methods."
185,general,185,general: Elements that do not belong together should not appear to be grouped.
186,general,186,"general: Information should be succinct, unambiguous, and not repetitive."
187,general,187,"general: Information should be displayed using visual hierarchy, through the use of size, prominence and content relationships."
188,general,188,general: Messages and popups and should appear where users are likely to see them.
189,general,189,general: The placement of buttons should remain consistent across screens.
190,general,190,general: Text should be easy to understand and not complicated.
191,general,191,general: Text should always be easy to read (not too small and in a readable font).
192,general,192,general: Information that is important for the user to remember across screens should be shown continuously.
193,general,193,general: The status and 'mode' of the system should always be clearly indicated to the user.
194,general,194,general: Users should know their progress towards their current goal.
195,general,195,general: Click goals should be large enough to hit and not too close to each other.
196,general,196,general: Icons in the same component should have the same weight.
197,general,197,general: Icons next to text should have the same weight as the text.
198,component_types,198,component types: Badges can be placed in the corner of icons to indicate the presence of notifications or communicate item counts. They can be small or large.
199,component_types,199,"component types: Bottom app bars are placed at the bottom of the screen and contain up to 4 action icons and a floating action button. They contain actions relevant to the current screen, not navigation actions."
200,component_types,200,"component types: Bottom sheets exist at the bottom of the screen and contain secondary content. Modal bottom sheets cover the rest of the screen with a scrim and can be used as an alternative to dialogs or menus, while standard bottom sheets can be pulled up to move to a new screen presenting their content."
201,component_types,201,"component types: Cards are highly customizable containers that can group text content, media, and actions that are related in some way."
202,component_types,202,"component types: Carousels contain related items that can be scrolled horizontally or vertically. The items can be customized in many ways. There are multi-browse, hero, uncontained and full-screen carousels."
203,component_types,203,component types: Checkboxes are selection controls that can be used for selecting options from a list when options are not mutually exclusive. They can be nested with parent checkboxes controlling their child checkboxes.
204,component_types,204,"component types: Chips are used for various purposes that are not important enough to warrant the use of buttons. Assist chips are used for smart or automated actions that can span multiple apps (e.g. add to calendar), filter chips are used to filter a collection of items, input chips are used to separate discrete pieces of information entered by the user (e.g. email contacts), and suggestions chips show suggestions to the user"
205,component_types,205,"component types: Buttons communicate important actions that users can take and guide users through apps. There are filled, tonal filled, elevated, outlined, and text buttons. Note that while floating action buttons (FABs), segmented buttons, and icon buttons share the name button with these types of buttons, they are different components with different guidelines."
206,component_types,206,"component types: Floating action buttons (FABs) help users take primary actions. They float in the bottom right corner of the screen and present the most important action(s). There are large, small, and standard FABs."
207,component_types,207,"component types: Extended FABs fill the same role as FABs, but include text to more clearly communicate their function."
208,component_types,208,"component types: Icon buttons let users take minor actions that are less important than those taken with common buttons. They can be standard or contained, with contained icon buttons being either filled, outlined, or tonal filled."
209,component_types,209,"component types: Segmented buttons help users select options, switch views, or sort elements. They contain multiple segments containing icons and/or labels and are used for simple choices between two to five items. They can be single-select or multi-select depending on the context of the choice."
210,component_types,210,"component types: Dialogs provide important prompts to users, letting them acknowledge critical information or make important choices. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken. They can contain other types of components, like lists, selection controls, and buttons."
211,component_types,211,component types: Dividers are thin lines that group content in lists or other containers. There are vertical and horizontal full-width and inset dividers.
212,component_types,212,"component types: Lists are continuous, vertical indexes of text and images that help users find a specific item and act on it. They can also contain selection controls or icons."
213,component_types,213,component types: Menus display a list of choices on a temporary surface. They can be opened from various other components and let users make choices in a less intrusive way than dialogs.
214,component_types,214,component types: Navigation bars let people switch between UI views. They are located at the bottom of the screen and contain icons and/or labels for 3 to 5 destinations in an app.
215,component_types,215,component types: Navigation drawers open from the side of the screen and let users switch between UI views from a list. They can also contain dividers and section headers to group and organize destinations.
216,component_types,216,component types: Radio buttons let people select one option from a set of options.
217,component_types,217,"component types: Search lets people enter a keyword or phrase to get relevant information. There are search bars, which present the user with the option to begin searching, and search views, which present results to the user."
218,component_types,218,"component types: Sliders let users make selections from a range of values. There are continuous and discrete sliders, which can be standard, centered, or range selections."
219,component_types,219,component types: Snackbars show short updates about app processes at the bottom of the screen. They can contain a single action and disappear on their own without user input.
220,component_types,220,component types: Switches toggle the selection of an item on or off. They are used if items in a list can be independently controlled and can contain icons to make their purpose clearer if necessary.
221,component_types,221,component types: Tabs organize content across different screens and views. They can scroll horizontally and their amount is not limited. They group content into helpful categories. There are primary and secondary tabs.
222,component_types,222,component types: Text fields let users enter text into a UI. There are filled and outlined text fields.
223,component_types,223,"component types: Top app bars display navigation, actions, and text at the top of a screen. They contain a title and actions related to the current screen. There are center-aligned, small, medium, and large top app bars."
